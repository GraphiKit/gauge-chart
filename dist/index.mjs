export class GaugeChart{constructor(t,e,i="#3FABFF",a={}){if(this.canvas="string"==typeof t?document.querySelector(t):t,this.color=i,!(this.canvas instanceof HTMLCanvasElement))throw new Error("Invalid selector: Expected a <canvas> element.");this.ctx=this.canvas.getContext("2d"),this.percentages=e||[.15,.5,.2,.15],this.strokeWidthFactor=a.strokeWidthFactor||.4,window.addEventListener("resize",(()=>this.resize())),this.resize()}resize(){const t=window.devicePixelRatio||1,e=this.canvas.getBoundingClientRect();this.canvas.width=e.width*t,this.canvas.height=e.height*t,this.ctx.scale(t,t),this.draw()}draw(){const{ctx:t,canvas:e,percentages:i,strokeWidthFactor:a}=this,s=e.getBoundingClientRect(),h=s.width,n=s.height,r=2*Math.min(h,n-10)/10*a,o=(Math.min(h,n-r/Math.PI)-r)/2,c=h/2,d=n/2;t.clearRect(0,0,h,n);const l=.01+parseFloat((r/(2*o*Math.PI)).toFixed(3));let g=0;for(const e of i)t.lineCap="round",t.strokeStyle=this.color,t.lineWidth=r,t.beginPath(),t.arc(c,d,o,2*(g+l/2)*Math.PI,2*(g+e-l/2)*Math.PI,!1),t.stroke(),t.lineCap="square",t.strokeStyle=this.color,t.lineWidth=2,t.beginPath(),t.arc(c,d,o-r/2-t.lineWidth-2,2*(g+.0075)*Math.PI,2*(g+e-.0075)*Math.PI,!1),t.stroke(),g+=e}}export default GaugeChart;